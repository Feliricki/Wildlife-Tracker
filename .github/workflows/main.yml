name: Deploy Frontend and Backend
on:
  push:
    branches:
      - master

jobs:
  # This job always runs first to check which paths have changed
  check_paths:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches all history for git diff to work

      - name: Check for file changes
        id: changes
        run: |
          # Check for changes in the frontend directory
          if git diff --quiet HEAD^ HEAD -- ./WildlifeTracker; then
            echo "frontend=false" >> $GITHUB_OUTPUT
          else
            echo "frontend=true" >> $GITHUB_OUTPUT
          fi

          # Check for changes in the backend directory
          if git diff --quiet HEAD^ HEAD -- ./WildlifeTrackerAPI; then
            echo "backend=false" >> $GITHUB_OUTPUT
          else
            echo "backend=true" >> $GITHUB_OUTPUT
          fi

  deploy-frontend:
    needs: check_paths # Depends on the path checker job
    if: needs.check_paths.outputs.frontend == 'true' # Only runs if frontend files changed
    runs-on: ubuntu-latest
    
    # Set a default working directory for all run commands in this job
    defaults:
      run:
        working-directory: ./WildlifeTracker
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies
        run: npm install

      - name: Build Angular Project
        run: npm run build -- --configuration production

      - name: Move files to public directory
        run: cp -r ./public/browser/* ./public

      - name: Install Firebase CLI
        # We install the official command-line tool
        run: npm install -g firebase-tools

      - name: Deploy to Firebase
        # We run the deploy command directly
        run: firebase deploy --only hosting --token "${{ secrets.FIREBASE_TOKEN }}"

  deploy-backend:
    needs: check_paths # Depends on the path checker job
    if: needs.check_paths.outputs.backend == 'true' # Only runs if backend files changed
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'

      - name: Build and publish the backend
        run: dotnet publish ./WildlifeTrackerAPI/WildlifeTrackerAPI.csproj --configuration Release --os linux --arch x64 --self-contained true -o ./publish

      - name: Prepare Server by Stopping Services and Clearing Directory 
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.LIGHTSAIL_SSH_HOST }}
          username: ${{ secrets.LIGHTSAIL_SSH_USERNAME }}
          key: ${{ secrets.LIGHTSAIL_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            # Stop services
            sudo systemctl stop nginx.service
            sudo systemctl stop kestral-WildlifeTrackerAPI.service
            
            # Clear directory
            sudo rm -rf /var/www/WildlifeTrackerAPI/*
            
            # Ensure the directory exists and give our user ownership
            sudo mkdir -p /var/www/WildlifeTrackerAPI
            sudo chown -R ${{ secrets.LIGHTSAIL_SSH_USERNAME }}:${{ secrets.LIGHTSAIL_SSH_USERNAME }} /var/www/WildlifeTrackerAPI

      - name: Copy New Files to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.LIGHTSAIL_SSH_HOST }}
          username: ${{ secrets.LIGHTSAIL_SSH_USERNAME }}
          key: ${{ secrets.LIGHTSAIL_SSH_PRIVATE_KEY }}
          port: 22
          source: "./publish/*"
          target: "/var/www/WildlifeTrackerAPI"
          strip_components: 1

      - name: Create AppSettings and Restart Services
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.LIGHTSAIL_SSH_HOST }}
          username: ${{ secrets.LIGHTSAIL_SSH_USERNAME }}
          key: ${{ secrets.LIGHTSAIL_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            # Create the Data Protection directory
            sudo mkdir -p /var/www/WildlifeTrackerAPI/.aspnet/DataProtection-Keys
            # Set the correct ownership for the web server user
            sudo chown -R www-data:www-data /var/www/WildlifeTrackerAPI/.aspnet
            
            # Create the appsettings file
            cat <<'EOF' > /var/www/WildlifeTrackerAPI/appsettings.Production.json
            ${{ secrets.DOTNET_PRODUCTION_APPSETTINGS }}
            EOF
            
            # Restart services
            sudo systemctl start kestral-WildlifeTrackerAPI.service
            sudo systemctl start nginx.service
